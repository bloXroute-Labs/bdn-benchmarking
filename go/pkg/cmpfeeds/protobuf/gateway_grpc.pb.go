// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gateway

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	NewTxs(ctx context.Context, in *TxsRequest, opts ...grpc.CallOption) (Gateway_NewTxsClient, error)
	PendingTxs(ctx context.Context, in *TxsRequest, opts ...grpc.CallOption) (Gateway_PendingTxsClient, error)
	NewBlocks(ctx context.Context, in *BlocksRequest, opts ...grpc.CallOption) (Gateway_NewBlocksClient, error)
	BdnBlocks(ctx context.Context, in *BlocksRequest, opts ...grpc.CallOption) (Gateway_BdnBlocksClient, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) NewTxs(ctx context.Context, in *TxsRequest, opts ...grpc.CallOption) (Gateway_NewTxsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gateway_ServiceDesc.Streams[0], "/gateway.Gateway/NewTxs", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayNewTxsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Gateway_NewTxsClient interface {
	Recv() (*TxsReply, error)
	grpc.ClientStream
}

type gatewayNewTxsClient struct {
	grpc.ClientStream
}

func (x *gatewayNewTxsClient) Recv() (*TxsReply, error) {
	m := new(TxsReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gatewayClient) PendingTxs(ctx context.Context, in *TxsRequest, opts ...grpc.CallOption) (Gateway_PendingTxsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gateway_ServiceDesc.Streams[1], "/gateway.Gateway/PendingTxs", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayPendingTxsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Gateway_PendingTxsClient interface {
	Recv() (*TxsReply, error)
	grpc.ClientStream
}

type gatewayPendingTxsClient struct {
	grpc.ClientStream
}

func (x *gatewayPendingTxsClient) Recv() (*TxsReply, error) {
	m := new(TxsReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gatewayClient) NewBlocks(ctx context.Context, in *BlocksRequest, opts ...grpc.CallOption) (Gateway_NewBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gateway_ServiceDesc.Streams[2], "/gateway.Gateway/NewBlocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayNewBlocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Gateway_NewBlocksClient interface {
	Recv() (*BlocksReply, error)
	grpc.ClientStream
}

type gatewayNewBlocksClient struct {
	grpc.ClientStream
}

func (x *gatewayNewBlocksClient) Recv() (*BlocksReply, error) {
	m := new(BlocksReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gatewayClient) BdnBlocks(ctx context.Context, in *BlocksRequest, opts ...grpc.CallOption) (Gateway_BdnBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gateway_ServiceDesc.Streams[3], "/gateway.Gateway/BdnBlocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayBdnBlocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Gateway_BdnBlocksClient interface {
	Recv() (*BlocksReply, error)
	grpc.ClientStream
}

type gatewayBdnBlocksClient struct {
	grpc.ClientStream
}

func (x *gatewayBdnBlocksClient) Recv() (*BlocksReply, error) {
	m := new(BlocksReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	NewTxs(*TxsRequest, Gateway_NewTxsServer) error
	PendingTxs(*TxsRequest, Gateway_PendingTxsServer) error
	NewBlocks(*BlocksRequest, Gateway_NewBlocksServer) error
	BdnBlocks(*BlocksRequest, Gateway_BdnBlocksServer) error
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) NewTxs(*TxsRequest, Gateway_NewTxsServer) error {
	return status.Errorf(codes.Unimplemented, "method NewTxs not implemented")
}
func (UnimplementedGatewayServer) PendingTxs(*TxsRequest, Gateway_PendingTxsServer) error {
	return status.Errorf(codes.Unimplemented, "method PendingTxs not implemented")
}
func (UnimplementedGatewayServer) NewBlocks(*BlocksRequest, Gateway_NewBlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method NewBlocks not implemented")
}
func (UnimplementedGatewayServer) BdnBlocks(*BlocksRequest, Gateway_BdnBlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method BdnBlocks not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_NewTxs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TxsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayServer).NewTxs(m, &gatewayNewTxsServer{stream})
}

type Gateway_NewTxsServer interface {
	Send(*TxsReply) error
	grpc.ServerStream
}

type gatewayNewTxsServer struct {
	grpc.ServerStream
}

func (x *gatewayNewTxsServer) Send(m *TxsReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Gateway_PendingTxs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TxsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayServer).PendingTxs(m, &gatewayPendingTxsServer{stream})
}

type Gateway_PendingTxsServer interface {
	Send(*TxsReply) error
	grpc.ServerStream
}

type gatewayPendingTxsServer struct {
	grpc.ServerStream
}

func (x *gatewayPendingTxsServer) Send(m *TxsReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Gateway_NewBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlocksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayServer).NewBlocks(m, &gatewayNewBlocksServer{stream})
}

type Gateway_NewBlocksServer interface {
	Send(*BlocksReply) error
	grpc.ServerStream
}

type gatewayNewBlocksServer struct {
	grpc.ServerStream
}

func (x *gatewayNewBlocksServer) Send(m *BlocksReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Gateway_BdnBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlocksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayServer).BdnBlocks(m, &gatewayBdnBlocksServer{stream})
}

type Gateway_BdnBlocksServer interface {
	Send(*BlocksReply) error
	grpc.ServerStream
}

type gatewayBdnBlocksServer struct {
	grpc.ServerStream
}

func (x *gatewayBdnBlocksServer) Send(m *BlocksReply) error {
	return x.ServerStream.SendMsg(m)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NewTxs",
			Handler:       _Gateway_NewTxs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PendingTxs",
			Handler:       _Gateway_PendingTxs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "NewBlocks",
			Handler:       _Gateway_NewBlocks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BdnBlocks",
			Handler:       _Gateway_BdnBlocks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gateway.proto",
}
